<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ritchey.choices.mapper.chapel.ScheduledEventMapper">
   <resultMap id="BaseResultMap" type="com.ritchey.choices.domain.chapel.ScheduledEvent">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="event" jdbcType="INTEGER" property="event" />
    <result column="starttime" jdbcType="TIMESTAMP" property="starttime" />
    <result column="endtime" jdbcType="TIMESTAMP" property="endtime" />
    <result column="template" jdbcType="VARCHAR" property="template" />
    <result column="recordTardy" jdbcType="BIT" property="recordtardy" />
    <result column="recordLate" jdbcType="BIT" property="recordlate" />
    <result column="allcredit" jdbcType="BIT" property="allcredit" />
    <result column="split" jdbcType="BIT" property="split" />
    <result column="splitByInstructor" jdbcType="BIT" property="splitbyinstructor" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    id, event, starttime, endtime, template, recordTardy, recordLate, allcredit, split, 
    splitByInstructor
  </sql>
  <select id="selectByExample" parameterType="com.ritchey.choices.domain.chapel.ScheduledEventExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from scheduledEvent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    select 
    <include refid="Base_Column_List" />
    from scheduledEvent
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    delete from scheduledEvent
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ritchey.choices.domain.chapel.ScheduledEventExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    delete from scheduledEvent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.ritchey.choices.domain.chapel.ScheduledEvent" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    insert into scheduledEvent (event, starttime, endtime, 
      template, recordTardy, recordLate, 
      allcredit, split, splitByInstructor
      )
    values (#{event,jdbcType=INTEGER}, #{starttime,jdbcType=TIMESTAMP}, #{endtime,jdbcType=TIMESTAMP}, 
      #{template,jdbcType=VARCHAR}, #{recordtardy,jdbcType=BIT}, #{recordlate,jdbcType=BIT}, 
      #{allcredit,jdbcType=BIT}, #{split,jdbcType=BIT}, #{splitbyinstructor,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.ritchey.choices.domain.chapel.ScheduledEvent" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    insert into scheduledEvent
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="event != null">
        event,
      </if>
      <if test="starttime != null">
        starttime,
      </if>
      <if test="endtime != null">
        endtime,
      </if>
      <if test="template != null">
        template,
      </if>
      <if test="recordtardy != null">
        recordTardy,
      </if>
      <if test="recordlate != null">
        recordLate,
      </if>
      <if test="allcredit != null">
        allcredit,
      </if>
      <if test="split != null">
        split,
      </if>
      <if test="splitbyinstructor != null">
        splitByInstructor,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="event != null">
        #{event,jdbcType=INTEGER},
      </if>
      <if test="starttime != null">
        #{starttime,jdbcType=TIMESTAMP},
      </if>
      <if test="endtime != null">
        #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="template != null">
        #{template,jdbcType=VARCHAR},
      </if>
      <if test="recordtardy != null">
        #{recordtardy,jdbcType=BIT},
      </if>
      <if test="recordlate != null">
        #{recordlate,jdbcType=BIT},
      </if>
      <if test="allcredit != null">
        #{allcredit,jdbcType=BIT},
      </if>
      <if test="split != null">
        #{split,jdbcType=BIT},
      </if>
      <if test="splitbyinstructor != null">
        #{splitbyinstructor,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ritchey.choices.domain.chapel.ScheduledEventExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    select count(*) from scheduledEvent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    update scheduledEvent
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.event != null">
        event = #{record.event,jdbcType=INTEGER},
      </if>
      <if test="record.starttime != null">
        starttime = #{record.starttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endtime != null">
        endtime = #{record.endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.template != null">
        template = #{record.template,jdbcType=VARCHAR},
      </if>
      <if test="record.recordtardy != null">
        recordTardy = #{record.recordtardy,jdbcType=BIT},
      </if>
      <if test="record.recordlate != null">
        recordLate = #{record.recordlate,jdbcType=BIT},
      </if>
      <if test="record.allcredit != null">
        allcredit = #{record.allcredit,jdbcType=BIT},
      </if>
      <if test="record.split != null">
        split = #{record.split,jdbcType=BIT},
      </if>
      <if test="record.splitbyinstructor != null">
        splitByInstructor = #{record.splitbyinstructor,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    update scheduledEvent
    set id = #{record.id,jdbcType=INTEGER},
      event = #{record.event,jdbcType=INTEGER},
      starttime = #{record.starttime,jdbcType=TIMESTAMP},
      endtime = #{record.endtime,jdbcType=TIMESTAMP},
      template = #{record.template,jdbcType=VARCHAR},
      recordTardy = #{record.recordtardy,jdbcType=BIT},
      recordLate = #{record.recordlate,jdbcType=BIT},
      allcredit = #{record.allcredit,jdbcType=BIT},
      split = #{record.split,jdbcType=BIT},
      splitByInstructor = #{record.splitbyinstructor,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ritchey.choices.domain.chapel.ScheduledEvent">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    update scheduledEvent
    <set>
      <if test="event != null">
        event = #{event,jdbcType=INTEGER},
      </if>
      <if test="starttime != null">
        starttime = #{starttime,jdbcType=TIMESTAMP},
      </if>
      <if test="endtime != null">
        endtime = #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="template != null">
        template = #{template,jdbcType=VARCHAR},
      </if>
      <if test="recordtardy != null">
        recordTardy = #{recordtardy,jdbcType=BIT},
      </if>
      <if test="recordlate != null">
        recordLate = #{recordlate,jdbcType=BIT},
      </if>
      <if test="allcredit != null">
        allcredit = #{allcredit,jdbcType=BIT},
      </if>
      <if test="split != null">
        split = #{split,jdbcType=BIT},
      </if>
      <if test="splitbyinstructor != null">
        splitByInstructor = #{splitbyinstructor,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ritchey.choices.domain.chapel.ScheduledEvent">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 14:08:33 CDT 2020.
    -->
    update scheduledEvent
    set event = #{event,jdbcType=INTEGER},
      starttime = #{starttime,jdbcType=TIMESTAMP},
      endtime = #{endtime,jdbcType=TIMESTAMP},
      template = #{template,jdbcType=VARCHAR},
      recordTardy = #{recordtardy,jdbcType=BIT},
      recordLate = #{recordlate,jdbcType=BIT},
      allcredit = #{allcredit,jdbcType=BIT},
      split = #{split,jdbcType=BIT},
      splitByInstructor = #{splitbyinstructor,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
  <update id="createFutureEvents">
WITH mycte AS /*scheduledEventMapper createFutureEvents*/
(
  SELECT cast(#{today,jdbcType=TIMESTAMP} as date) DateValue
  UNION ALL
  SELECT  dateadd(day, 1, DateValue)
  FROM    mycte
  WHERE   dateadd(day, 1, DateValue) &lt; #{endTerm,jdbcType=TIMESTAMP}
)
insert into scheduledEvent(event, starttime, endtime, template) 
select #{eventId,jdbcType=INTEGER} as event, 
	dateadd(minute, #{startminute,jdbcType=INTEGER}, dateadd(hour, #{starthour,jdbcType=INTEGER},cast(datevalue as datetime))) as starttime, 
	dateadd(minute, #{endminute,jdbcType=INTEGER}, dateadd(hour, #{endhour,jdbcType=INTEGER}, cast(datevalue as datetime))) as endtime,
	#{template,jdbcType=VARCHAR} as template
FROM    mycte
where datename(dw, datevalue) in 
    <foreach item="item" index="index" collection="list"
        open="(" separator="," close=")">
          #{item}
    </foreach>
OPTION (MAXRECURSION 0)
     </update>
     
  <select id="futureConflicts" resultMap="BaseResultMap">    
select /*scheduledEventMapper futureConflicts*/
<include refid="Base_Column_List" />
<![CDATA[
from scheduledEvent
where (1=1)
  and (cast(starttime as time) between cast(#{starttime,jdbcType=TIMESTAMP} as time) and cast(#{endtime,jdbcType=TIMESTAMP} as time) or cast(endtime as time) between cast(#{starttime,jdbcType=TIMESTAMP} as time) and cast(#{endtime,jdbcType=TIMESTAMP} as time))
  and event = #{event,jdbcType=INTEGER}
  and cast(endtime as date) <= cast(#{enddate,jdbcType=TIMESTAMP} as date)
  and starttime > #{startdate,jdbcType=TIMESTAMP}
  and datename(weekday, starttime) in
]]>
      <foreach item="item" index="index" collection="daysOfWeek"
        open="(" separator="," close=")">
          #{item}
    </foreach>
<if test="ignoreId != null" >
<![CDATA[
    and id <> #{ignoreId,jdbcType=INTEGER}
]]>
</if>
<if test="ignoreTemplate != null" >
<![CDATA[
  and (template is null or template <> #{ignoreTemplate,jdbcType=INTEGER})
]]>
</if>
order by starttime 
  </select>
  
    <select id="timeConflicts" resultMap="BaseResultMap">    
select /*scheduledEventMapper timeConflicts*/
<include refid="Base_Column_List" />
from scheduledEvent
where (1=1)
  and (starttime between #{starttime,jdbcType=TIMESTAMP} and #{endtime,jdbcType=TIMESTAMP} 
  	or endtime between #{starttime,jdbcType=TIMESTAMP} and #{endtime,jdbcType=TIMESTAMP})
  and event = #{event,jdbcType=INTEGER}
<if test="ignoreId != null" >
<![CDATA[
    and id <> #{ignoreId,jdbcType=INTEGER}
]]>
</if>
order by starttime 
  </select>
    

  
   <update id="updateByExampleExtra" parameterType="map" >
    update scheduledEvent /*scheduledEventMapper updateByExampleExtra*/
    set 
    	starttime = cast(cast(starttime as date) as datetime) + cast(cast(#{record.starttime,jdbcType=TIMESTAMP} as time) as datetime), 
  		endtime = cast(cast(endtime as date) as datetime) + cast(cast(#{record.endtime,jdbcType=TIMESTAMP} as time) as datetime),
      event = #{record.event,jdbcType=INTEGER},
      template = #{record.template,jdbcType=VARCHAR},
      recordTardy = #{record.recordtardy,jdbcType=BIT},
      recordLate = #{record.recordlate,jdbcType=BIT},
      allcredit = #{record.allcredit,jdbcType=BIT},
      split = #{record.split,jdbcType=BIT},
      splitbyinstructor = #{record.splitbyinstructor,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
   <update id="detach" parameterType="map" >
    update scheduledEvent
    set template = null
    where id = #{id,jdbcType=INTEGER}
  </update>
  
 <select id="selectSplitDays" resultType="map" >
select distinct template, right(template, charindex(':', reverse(template)) - 1) as days, min(format(starttime, 'HHmm')) as starttime
from scheduledEvent
where starttime > getDate() and template is not null and split = 1
group by template
 </select>
 
 <select id="selectSplitInstructorCount" resultType="java.lang.Integer" >
select count(*)
from scheduledEvent
where endTime > getDate()
	and splitByInstructor = 1
 </select>
 
 <select id="progressQuery" resultType="map">
   select p.people_id as campusId 
  	, convert(varchar(50), lastName) collate Cyrillic_General_CI_AI as lastName
  	, convert(varchar(50), firstName) collate Cyrillic_General_CI_AI as firstName
  	, convert(varchar(50), middleName) collate Cyrillic_General_CI_AI as middleName
  	, coalesce(ex.exempt, 0) as exempt, 
	coalesce(sum(value), 0) as credit, coalesce(e.hoursRequired, 0)-coalesce(sum(value),0) as lacks,
	coalesce(cast(ex.comment as varchar), '') as notes
from  
	person p 
	left join (
/* find all punches into chapel */
select p.campusId, e.description, cast(se.starttime as date) as day, 
	min(case when se.allcredit = 1 then e.attendanceValue else value end) as value
from scheduledEvent se
	join event e on se.event = e.id
    left join punch p on se.id = eventschedule /*  left join to get events with no punches for all credit; null campusId */
where (1=1)  
        and se.allcredit = 0
	and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
group by campusId, se.event, e.description, cast(se.starttime as date)
union
/* find all credit for all students */
select people_id as campusId, e.description, cast(se.starttime as date) as day, e.attendanceValue as value
from scheduledEvent se
	join event e on se.event = e.id
        join person p on p.currentStudent = 1
where (allcredit = 1 and split = 0 and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP})
union 
select campusId, description, day, value
from (
	select people_id as campusId, e.description, cast(se.starttime as date) as day, e.attendanceValue as value
	, row_number() over( partition by people_id, e.description, dbo.week_of_year(se.starttime) 
		order by case when people_id is null then 1 else 0 end) as rn
	from scheduledEvent se
		join event e on se.event = e.id
	        join person p on p.currentStudent = 1
	where (allcredit = 1 and split = 1 and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP})
) a where rn = 1
) a on p.people_id = a.campusId
  left join exemptions ex on ex.personId = p.id and ex.endTerm &gt; getDate()
  left join exempt e on e.exemptions = coalesce(ex.exempt, 0) and e.createDate = 
      (select max(createDate)
        from exempt
        )
  where (1=1)
  	and  currentStudent = 1
  group by p.people_id, lastName, firstName, middleName, ex.exempt, cast(ex.comment as varchar), e.hoursRequired
  order by coalesce(e.hoursRequired, 0)-coalesce(sum(value),0) desc, lastName asc, firstName asc, middleName asc
 </select>
 
  <select id="progressQueryHistory" resultType="map">
select campusId
  	, convert(varchar(50), lastName) collate Cyrillic_General_CI_AI as lastName
  	, convert(varchar(50), firstName) collate Cyrillic_General_CI_AI as firstName
  	, convert(varchar(50), middleName) collate Cyrillic_General_CI_AI as middleName
  	, ex.exempt, credit, lacks, ex.comment as notes
from (
select a.id, campusId, lastName, firstName, middleName, ex.exempt, sum(value) as credit, coalesce(e.hoursRequired, 0)-coalesce(sum(value),0) as lacks
from  (
select per.id, campusId, e.description, cast(se.starttime as date) as day,
        min(case when se.allcredit = 1 then e.attendanceValue else value end) as value
from scheduledEvent se
        join event e on se.event = e.id
        left join punch p on se.id = eventschedule
        left join person per on per.people_id = p.campusId
where (1=1) 
        and se.allcredit = 0
        and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
        and se.starttime &lt; #{endterm,jdbcType=TIMESTAMP}
group by per.id, campusId, se.event, e.description, cast(se.starttime as date)
union
select p.id, people_id as campusId, e.description, cast(se.starttime as date) as day, e.attendanceValue as value
from scheduledEvent se
        join event e on se.event = e.id
        join (
 select per.id, per.people_id
from scheduledEvent se
        left join punch p on se.id = eventschedule
        join person per on per.people_id= p.campusId
where (1=1)
        and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
        and se.starttime &lt; #{endterm,jdbcType=TIMESTAMP}
        ) p on 1=1
where (allcredit = 1
		and split = 0
        and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
        and se.starttime &lt; #{endterm,jdbcType=TIMESTAMP}
        )
union 
select id, campusId, description, day, value
from (
select p.id, people_id as campusId, e.description, cast(se.starttime as date) as day, e.attendanceValue as value
	, row_number() over( partition by people_id, e.description, dbo.week_of_year(se.starttime) 
		order by case when people_id is null then 1 else 0 end) as rn
from scheduledEvent se
        join event e on se.event = e.id
        join (
 select per.id, per.people_id
from scheduledEvent se
        left join punch p on se.id = eventschedule
        join person per on per.people_id= p.campusId
where (1=1)
        and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
        and se.starttime &lt; #{endterm,jdbcType=TIMESTAMP}
        ) p on 1=1
where (allcredit = 1
		and split = 1
        and se.starttime &gt;= #{startterm,jdbcType=TIMESTAMP}
        and se.starttime &lt; #{endterm,jdbcType=TIMESTAMP}
        )
    ) a where rn = 1
) as a
  join person p on p.people_id = a.campusId
    left join exemptions ex on ex.personId = p.id and ex.endTerm = #{endterm,jdbcType=TIMESTAMP}
        left join exempt e on e.exemptions = coalesce(ex.exempt, 0) and e.createDate = 
      (select max(createDate)
        from exempt
        where createDate &lt;= cast(#{endterm,jdbcType=TIMESTAMP} as date)
        )
group by a.id, campusId, lastName, firstName, middleName, ex.exempt, coalesce(e.hoursRequired, 0)
) as b
left join exemptions ex on ex.personId = b.id and ex.endTerm = #{endterm,jdbcType=TIMESTAMP}
order by lacks desc, lastName, firstName, middlename asc
 </select>
 
 <update id="updateSplitAllCredit" parameterType="map" >
	 update se1 set allcredit = #{value,jdbcType=BIT}
	from scheduledEvent se1
		join scheduledEvent se2 on se1.template = se2.template 
			and dbo.week_of_year(se1.starttime) = dbo.week_of_year(se2.starttime) 
			and se1.allcredit &lt;&gt; se2.allcredit
	where 1=1
		and se1.allcredit = case when #{value,jdbcType=BIT} = 1 then 0 else 1 end
		and se1.split = 1
		and se2.id = #{id,jdbcType=INTEGER}
  </update>
  
</mapper>